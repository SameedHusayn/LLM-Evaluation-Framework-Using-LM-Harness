{
  "results": {
    "boolq": {
      "alias": "boolq",
      "acc,none": 0.8484848484848485,
      "acc_stderr,none": 0.06338333534349057
    },
    "cb": {
      "alias": "cb",
      "acc,none": 0.5454545454545454,
      "acc_stderr,none": 0.08802234877744129,
      "f1,none": 0.39225589225589225,
      "f1_stderr,none": "N/A"
    },
    "copa": {
      "alias": "copa",
      "acc,none": 0.8787878787878788,
      "acc_stderr,none": 0.057695250801999304
    },
    "multirc": {
      "alias": "multirc",
      "acc,none": 0.5454545454545454,
      "acc_stderr,none": 0.08802234877744129
    },
    "record": {
      "alias": "record",
      "f1,none": 0.9393939393939394,
      "f1_stderr,none": 0.04218003305174259,
      "em,none": 0.9393939393939394,
      "em_stderr,none": 0.04218003305174259
    },
    "sglue_rte": {
      "alias": "sglue_rte",
      "acc,none": 0.6666666666666666,
      "acc_stderr,none": 0.08333333333333333
    },
    "wic": {
      "alias": "wic",
      "acc,none": 0.5151515151515151,
      "acc_stderr,none": 0.08834775598250455
    },
    "wsc": {
      "alias": "wsc",
      "acc,none": 0.45454545454545453,
      "acc_stderr,none": 0.08802234877744129
    }
  },
  "group_subtasks": {
    "wsc": [],
    "wic": [],
    "sglue_rte": [],
    "record": [],
    "multirc": [],
    "copa": [],
    "cb": [],
    "boolq": []
  },
  "configs": {
    "boolq": {
      "task": "boolq",
      "tag": [
        "super-glue-lm-eval-v1"
      ],
      "dataset_path": "super_glue",
      "dataset_name": "boolq",
      "training_split": "train",
      "validation_split": "validation",
      "doc_to_text": "{{passage}}\nQuestion: {{question}}?\nAnswer:",
      "doc_to_target": "label",
      "doc_to_choice": [
        "no",
        "yes"
      ],
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "num_fewshot": 0,
      "metric_list": [
        {
          "metric": "acc"
        }
      ],
      "output_type": "multiple_choice",
      "repeats": 1,
      "should_decontaminate": true,
      "doc_to_decontamination_query": "passage",
      "metadata": {
        "version": 2.0
      }
    },
    "cb": {
      "task": "cb",
      "tag": [
        "super-glue-lm-eval-v1"
      ],
      "dataset_path": "super_glue",
      "dataset_name": "cb",
      "training_split": "train",
      "validation_split": "validation",
      "doc_to_text": "{{premise}}\nQuestion: {{hypothesis}}. True, False, or Neither?\nAnswer:",
      "doc_to_target": "label",
      "doc_to_choice": [
        "True",
        "False",
        "Neither"
      ],
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "num_fewshot": 0,
      "metric_list": [
        {
          "metric": "acc"
        },
        {
          "metric": "f1",
          "aggregation": "def cb_multi_fi(items):\n    from sklearn.metrics import f1_score\n\n    preds, golds = zip(*items)\n    preds = np.array(preds)\n    golds = np.array(golds)\n    f11 = f1_score(y_true=golds == 0, y_pred=preds == 0)\n    f12 = f1_score(y_true=golds == 1, y_pred=preds == 1)\n    f13 = f1_score(y_true=golds == 2, y_pred=preds == 2)\n    avg_f1 = np.mean([f11, f12, f13])\n    return avg_f1\n"
        }
      ],
      "output_type": "multiple_choice",
      "repeats": 1,
      "should_decontaminate": false,
      "metadata": {
        "version": 1.0
      }
    },
    "copa": {
      "task": "copa",
      "tag": [
        "super-glue-lm-eval-v1"
      ],
      "dataset_path": "super_glue",
      "dataset_name": "copa",
      "training_split": "train",
      "validation_split": "validation",
      "doc_to_text": "def doc_to_text(doc):\n    # Drop the period\n    connector = {\n        \"cause\": \"because\",\n        \"effect\": \"therefore\",\n    }[doc[\"question\"]]\n    return doc[\"premise\"].strip()[:-1] + f\" {connector}\"\n",
      "doc_to_target": "def doc_to_target(doc):\n    correct_choice = doc[\"choice1\"] if doc[\"label\"] == 0 else doc[\"choice2\"]\n    # Connect the sentences\n    return \" \" + convert_choice(correct_choice)\n",
      "doc_to_choice": "def doc_to_choice(doc):\n    return [\" \" + convert_choice(doc[\"choice1\"]), \" \" + convert_choice(doc[\"choice2\"])]\n",
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "num_fewshot": 0,
      "metric_list": [
        {
          "metric": "acc"
        }
      ],
      "output_type": "multiple_choice",
      "repeats": 1,
      "should_decontaminate": false,
      "metadata": {
        "version": 1.0
      }
    },
    "multirc": {
      "task": "multirc",
      "tag": [
        "super-glue-lm-eval-v1"
      ],
      "dataset_path": "super_glue",
      "dataset_name": "multirc",
      "training_split": "train",
      "validation_split": "validation",
      "doc_to_text": "{{paragraph}}\nQuestion: {{question}}\nAnswer:",
      "doc_to_target": "label",
      "doc_to_choice": "['''{{answer}}\\nIs the answer correct? yes''', '''{{answer}}\\nIs the answer correct? no''']",
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "num_fewshot": 0,
      "metric_list": [
        {
          "metric": "acc"
        }
      ],
      "output_type": "multiple_choice",
      "repeats": 1,
      "should_decontaminate": false,
      "metadata": {
        "version": 2.0
      }
    },
    "record": {
      "task": "record",
      "tag": [
        "super-glue-lm-eval-v1"
      ],
      "dataset_path": "super_glue",
      "dataset_name": "record",
      "training_split": "train",
      "validation_split": "validation",
      "process_docs": "def process_docs(dataset: datasets.Dataset):\n    def _process_doc(doc):\n        return {\n            \"passage\": doc[\"passage\"],\n            \"query\": doc[\"query\"],\n            \"entities\": sorted(list(set(doc[\"entities\"]))),\n            \"answers\": sorted(list(set(doc[\"answers\"]))),\n        }\n\n    return dataset.map(_process_doc)\n",
      "doc_to_text": "def doc_to_text(doc):\n    initial_text, *highlights = doc[\"passage\"].strip().split(\"\\n@highlight\\n\")\n    text = initial_text + \"\\n\\n\"\n    for highlight in highlights:\n        text += f\"  - {highlight}.\\n\"\n    return text\n",
      "doc_to_target": "def doc_to_target(doc):\n    # We only output the first correct entity in a doc\n    return format_answer(query=doc[\"query\"], entity=doc[\"answers\"][0])\n",
      "doc_to_choice": "def doc_to_choice(doc):\n    return [format_answer(query=doc[\"query\"], entity=ans) for ans in doc[\"entities\"]]\n",
      "process_results": "def process_results(doc, results):\n    # ReCoRD's evaluation is actually deceptively simple:\n    # - Pick the maximum likelihood prediction entity\n    # - Evaluate the accuracy and token F1 PER EXAMPLE\n    # - Average over all examples\n    max_idx = np.argmax(np.array([result[0] for result in results]))\n\n    prediction = doc[\"entities\"][max_idx]\n    gold_label_set = doc[\"answers\"]\n    f1 = metric_max_over_ground_truths(\n        squad_metrics.compute_f1, prediction, gold_label_set\n    )\n    em = metric_max_over_ground_truths(\n        squad_metrics.compute_exact, prediction, gold_label_set\n    )\n\n    return {\n        \"f1\": f1,\n        \"em\": em,\n    }\n",
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "num_fewshot": 0,
      "metric_list": [
        {
          "metric": "f1",
          "aggregation": "mean"
        },
        {
          "metric": "em",
          "higher_is_better": true,
          "aggregation": "mean"
        }
      ],
      "output_type": "multiple_choice",
      "repeats": 1,
      "should_decontaminate": false,
      "metadata": {
        "version": 2.0
      }
    },
    "sglue_rte": {
      "task": "sglue_rte",
      "tag": [
        "super-glue-lm-eval-v1"
      ],
      "dataset_path": "super_glue",
      "dataset_name": "rte",
      "training_split": "train",
      "validation_split": "validation",
      "doc_to_text": "{{premise}}\nQuestion: {{hypothesis}} True or False?\nAnswer:",
      "doc_to_target": "label",
      "doc_to_choice": [
        "True",
        "False"
      ],
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "num_fewshot": 0,
      "metric_list": [
        {
          "metric": "acc"
        }
      ],
      "output_type": "multiple_choice",
      "repeats": 1,
      "should_decontaminate": false,
      "metadata": {
        "version": 0.0
      }
    },
    "wic": {
      "task": "wic",
      "tag": [
        "super-glue-lm-eval-v1"
      ],
      "dataset_path": "super_glue",
      "dataset_name": "wic",
      "training_split": "train",
      "validation_split": "validation",
      "doc_to_text": "Sentence 1: {{sentence1}}\nSentence 2: {{sentence2}}\nQuestion: Is the word '{{sentence1[start1:end1]}}' used in the same way in the two sentences above?\nAnswer:",
      "doc_to_target": "label",
      "doc_to_choice": [
        "no",
        "yes"
      ],
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "num_fewshot": 0,
      "metric_list": [
        {
          "metric": "acc"
        }
      ],
      "output_type": "multiple_choice",
      "repeats": 1,
      "should_decontaminate": false,
      "metadata": {
        "version": 1.0
      }
    },
    "wsc": {
      "task": "wsc",
      "tag": [
        "super-glue-lm-eval-v1"
      ],
      "dataset_path": "super_glue",
      "dataset_name": "wsc.fixed",
      "training_split": "train",
      "validation_split": "validation",
      "doc_to_text": "def default_doc_to_text(x):\n    raw_passage = x[\"text\"]\n    # NOTE: HuggingFace span indices are word-based not character-based.\n    pre = \" \".join(raw_passage.split()[: x[\"span2_index\"]])\n    post = raw_passage[len(pre) + len(x[\"span2_text\"]) + 1 :]\n    passage = general_detokenize(pre + \" *{}*\".format(x[\"span2_text\"]) + post)\n    noun = x[\"span1_text\"]\n    pronoun = x[\"span2_text\"]\n    text = (\n        f\"Passage: {passage}\\n\"\n        + f'Question: In the passage above, does the pronoun \"*{pronoun}*\" refer to \"*{noun}*\"?\\n'\n        + \"Answer:\"\n    )\n    return text\n",
      "doc_to_target": "label",
      "doc_to_choice": [
        "no",
        "yes"
      ],
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "num_fewshot": 0,
      "metric_list": [
        {
          "metric": "acc"
        }
      ],
      "output_type": "multiple_choice",
      "repeats": 1,
      "should_decontaminate": false,
      "metadata": {
        "version": 1.0
      }
    }
  },
  "versions": {
    "boolq": 2.0,
    "cb": 1.0,
    "copa": 1.0,
    "multirc": 2.0,
    "record": 2.0,
    "sglue_rte": 0.0,
    "wic": 1.0,
    "wsc": 1.0
  },
  "n-shot": {
    "boolq": 0,
    "cb": 0,
    "copa": 0,
    "multirc": 0,
    "record": 0,
    "sglue_rte": 0,
    "wic": 0,
    "wsc": 0
  },
  "higher_is_better": {
    "boolq": {
      "acc": true
    },
    "cb": {
      "acc": true,
      "f1": true
    },
    "copa": {
      "acc": true
    },
    "multirc": {
      "acc": true
    },
    "record": {
      "f1": true,
      "em": true
    },
    "sglue_rte": {
      "acc": true
    },
    "wic": {
      "acc": true
    },
    "wsc": {
      "acc": true
    }
  },
  "n-samples": {
    "boolq": {
      "original": 3270,
      "effective": 33
    },
    "cb": {
      "original": 56,
      "effective": 33
    },
    "copa": {
      "original": 100,
      "effective": 33
    },
    "multirc": {
      "original": 4848,
      "effective": 33
    },
    "record": {
      "original": 10000,
      "effective": 33
    },
    "sglue_rte": {
      "original": 277,
      "effective": 33
    },
    "wic": {
      "original": 638,
      "effective": 33
    },
    "wsc": {
      "original": 104,
      "effective": 33
    }
  },
  "config": {
    "model": "openai-completions",
    "model_args": "model=davinci-002,trust_remote_code=True",
    "batch_size": 1,
    "batch_sizes": [],
    "device": null,
    "use_cache": null,
    "limit": 0.01,
    "bootstrap_iters": 100000,
    "gen_kwargs": null,
    "random_seed": 0,
    "numpy_seed": 1234,
    "torch_seed": 1234,
    "fewshot_seed": 1234
  },
  "git_hash": "69226f5d",
  "date": 1727344882.083741,
  "pretty_env_info": "PyTorch version: 2.3.1+cpu\nIs debug build: False\nCUDA used to build PyTorch: None\nROCM used to build PyTorch: N/A\n\nOS: Microsoft Windows 11 Pro\nGCC version: Could not collect\nClang version: Could not collect\nCMake version: version 3.30.2\nLibc version: N/A\n\nPython version: 3.12.2 (tags/v3.12.2:6abddd9, Feb  6 2024, 21:26:36) [MSC v.1937 64 bit (AMD64)] (64-bit runtime)\nPython platform: Windows-11-10.0.22631-SP0\nIs CUDA available: False\nCUDA runtime version: No CUDA\nCUDA_MODULE_LOADING set to: N/A\nGPU models and configuration: No CUDA\nNvidia driver version: No CUDA\ncuDNN version: No CUDA\nHIP runtime version: N/A\nMIOpen runtime version: N/A\nIs XNNPACK available: True\n\nCPU:\nArchitecture=9\r\r\nCurrentClockSpeed=2208\r\r\nDeviceID=CPU0\r\r\nFamily=206\r\r\nL2CacheSize=512\r\r\nL2CacheSpeed=\r\r\nManufacturer=GenuineIntel\r\r\nMaxClockSpeed=2208\r\r\nName=Intel(R) Core(TM) i3-8130U CPU @ 2.20GHz\r\r\nProcessorType=3\r\r\nRevision=\n\nVersions of relevant libraries:\n[pip3] numpy==1.26.4\n[pip3] torch==2.3.1\n[conda] Could not collect",
  "transformers_version": "4.41.2",
  "upper_git_hash": null,
  "task_hashes": {
    "boolq": "edd947d3cf1debc19d1b30d5f9a37f206744573b03b96eb1204d2245f22f582e",
    "cb": "5b472844af65ff4cf92b23d29655f8e1bffe896bd4a30e877cc0c6ae90eab9f4",
    "copa": "6551edc370960edaeb7487763bd9b1bba34b8a09a1461774d0d118a826893925",
    "multirc": "308da7e8fb4b6dcbf3b420fb06e5158e53dc945d247ee7217c14d6175df72d4a",
    "record": "04d0455ebedbd544bfd26a71abcb0e9aa21c6ec8e852fba2c6633ddb96e963ed",
    "sglue_rte": "d7969db803e7404ea867c821242dd23b5d74b4f3049c59fa4b78367771cc163c",
    "wic": "8320f139c4a621d58e3682cc2fcb8aa3c922011141df5fefc85c26f9f175ab9a",
    "wsc": "14e9695e954a594c1078b9d9861a9e6c3c222ccadab9dc895127b3246a361eb2"
  },
  "model_source": "openai-completions",
  "model_name": "davinci-002",
  "model_name_sanitized": "davinci-002",
  "system_instruction": null,
  "system_instruction_sha": null,
  "fewshot_as_multiturn": false,
  "chat_template": "",
  "chat_template_sha": null,
  "start_time": 168855.867235,
  "end_time": 169564.6710284,
  "total_evaluation_time_seconds": "708.8037933999731"
}